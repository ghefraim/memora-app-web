drop policy "Enable insert for authenticated users only" on "public"."events";

drop policy "Enable read access for all users" on "public"."events";

revoke delete on table "public"."events" from "anon";

revoke insert on table "public"."events" from "anon";

revoke references on table "public"."events" from "anon";

revoke select on table "public"."events" from "anon";

revoke trigger on table "public"."events" from "anon";

revoke truncate on table "public"."events" from "anon";

revoke update on table "public"."events" from "anon";

revoke delete on table "public"."events" from "authenticated";

revoke insert on table "public"."events" from "authenticated";

revoke references on table "public"."events" from "authenticated";

revoke select on table "public"."events" from "authenticated";

revoke trigger on table "public"."events" from "authenticated";

revoke truncate on table "public"."events" from "authenticated";

revoke update on table "public"."events" from "authenticated";

revoke delete on table "public"."events" from "service_role";

revoke insert on table "public"."events" from "service_role";

revoke references on table "public"."events" from "service_role";

revoke select on table "public"."events" from "service_role";

revoke trigger on table "public"."events" from "service_role";

revoke truncate on table "public"."events" from "service_role";

revoke update on table "public"."events" from "service_role";

alter table "public"."events" drop constraint "events_code_key";

alter table "public"."events" drop constraint "events_host_id_fkey";

alter table "public"."photos" drop constraint "photos_event_id_fkey";

drop function if exists "public"."get_random_event_code"();

alter table "public"."events" drop constraint "events_pkey";

drop index if exists "public"."events_code_key";

drop index if exists "public"."events_pkey";

drop table "public"."events";

create table "public"."galleries" (
    "id" bigint generated by default as identity not null,
    "title" text not null default ''::text,
    "description" text,
    "code" text not null,
    "start_date" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "end_date" timestamp with time zone not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "host_id" uuid not null default auth.uid(),
    "photos_limit" bigint
);


alter table "public"."galleries" enable row level security;

alter table "public"."photos" drop column "event_id";

alter table "public"."photos" add column "gallery_id" bigint not null;

CREATE UNIQUE INDEX events_code_key ON public.galleries USING btree (code);

CREATE UNIQUE INDEX events_pkey ON public.galleries USING btree (id);

alter table "public"."galleries" add constraint "events_pkey" PRIMARY KEY using index "events_pkey";

alter table "public"."galleries" add constraint "events_code_key" UNIQUE using index "events_code_key";

alter table "public"."galleries" add constraint "events_host_id_fkey" FOREIGN KEY (host_id) REFERENCES users(id) not valid;

alter table "public"."galleries" validate constraint "events_host_id_fkey";

alter table "public"."photos" add constraint "photos_event_id_fkey" FOREIGN KEY (gallery_id) REFERENCES galleries(id) not valid;

alter table "public"."photos" validate constraint "photos_event_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_random_gallery_code()
 RETURNS text
 LANGUAGE plpgsql
AS $function$DECLARE
    new_code TEXT;
    exists BOOLEAN;
BEGIN
    LOOP
        -- Generate a random 6-digit code
        new_code := LPAD(FLOOR(RANDOM() * 1000000)::TEXT, 6, '0');
        
        -- Check if the code exists in the 'events' table
        SELECT EXISTS (SELECT 1 FROM events WHERE code = new_code) INTO exists;
        
        -- If the code does not exist, exit the loop
        EXIT WHEN NOT exists;
    END LOOP;
    
    RETURN new_code;
END;$function$
;

grant delete on table "public"."galleries" to "anon";

grant insert on table "public"."galleries" to "anon";

grant references on table "public"."galleries" to "anon";

grant select on table "public"."galleries" to "anon";

grant trigger on table "public"."galleries" to "anon";

grant truncate on table "public"."galleries" to "anon";

grant update on table "public"."galleries" to "anon";

grant delete on table "public"."galleries" to "authenticated";

grant insert on table "public"."galleries" to "authenticated";

grant references on table "public"."galleries" to "authenticated";

grant select on table "public"."galleries" to "authenticated";

grant trigger on table "public"."galleries" to "authenticated";

grant truncate on table "public"."galleries" to "authenticated";

grant update on table "public"."galleries" to "authenticated";

grant delete on table "public"."galleries" to "service_role";

grant insert on table "public"."galleries" to "service_role";

grant references on table "public"."galleries" to "service_role";

grant select on table "public"."galleries" to "service_role";

grant trigger on table "public"."galleries" to "service_role";

grant truncate on table "public"."galleries" to "service_role";

grant update on table "public"."galleries" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."galleries"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."galleries"
as permissive
for select
to public
using (true);



